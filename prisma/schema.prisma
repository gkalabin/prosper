datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TransactionType {
  PERSONAL_EXPENSE
  THIRD_PARTY_EXPENSE
  INCOME
  TRANSFER
}

model Transaction {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime
  description String

  // categorisation
  tags       Tag[]
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  // refunds and debt repayments
  transactionToBeRepayed   Transaction?  @relation("Repayments", fields: [transactionToBeRepayedId], references: [id])
  transactionToBeRepayedId Int?
  repayments               Transaction[] @relation("Repayments")

  transactionType          TransactionType?
  vendor                   String?
  payer                    String?
  otherPartyName           String?
  ownShareAmountCents      Int?
  trip                     Trip?            @relation(fields: [tripId], references: [id])
  tripId                   Int?
  outgoingAccount          BankAccount?     @relation("OutgoingTransactions", fields: [outgoingAccountId], references: [id])
  outgoingAccountId        Int?
  outgoingAmountCents      Int?
  incomingAccount          BankAccount?     @relation("IncomingTransactions", fields: [incomingAccountId], references: [id])
  incomingAccountId        Int?
  incomingAmountCents      Int?
  payerOutgoingAmountCents Int?
  currencyCode             String?

  user                   User                   @relation(fields: [userId], references: [id])
  userId                 Int
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  TransactionPrototype   TransactionPrototype[]
  SourceTransactionLinks TransactionLink[]      @relation(name: "SourceTransactionLinks")
  LinkedTransactionLinks TransactionLink[]      @relation(name: "LinkedTransactionLinks")
}

enum TransactionLinkType {
  REFUND
  DEBT_SETTLING
}

model TransactionLink {
  id                  Int                 @id @default(autoincrement())
  sourceTransaction   Transaction         @relation("SourceTransactionLinks", fields: [sourceTransactionId], references: [id])
  sourceTransactionId Int
  linkedTransaction   Transaction         @relation("LinkedTransactionLinks", fields: [linkedTransactionId], references: [id])
  linkedTransactionId Int
  linkType            TransactionLinkType
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model BankAccount {
  id           Int     @id @default(autoincrement())
  name         String
  bank         Bank    @relation(fields: [bankId], references: [id])
  bankId       Int
  currencyCode String?
  stock        Stock?  @relation(fields: [stockId], references: [id])
  stockId      Int?

  // UI configuration
  displayOrder Int     @default(0)
  archived     Boolean @default(false)

  // Joint accounts are owned by 2 people and personal value of such accounts is half of the balance.
  joint Boolean @default(false)

  // TODO: move to a separate table
  initialBalanceCents Int @default(0)

  user                   User                     @relation(fields: [userId], references: [id])
  userId                 Int
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  ExternalAccountMapping ExternalAccountMapping[]
  outgoingTransactions   Transaction[]            @relation("OutgoingTransactions")
  incomingTransactions   Transaction[]            @relation("IncomingTransactions")
}

model Bank {
  id           Int           @id @default(autoincrement())
  name         String
  displayOrder Int           @default(0)
  accounts     BankAccount[]

  user                User                 @relation(fields: [userId], references: [id])
  userId              Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  NordigenRequisition NordigenRequisition?
  NordigenToken       NordigenToken?
  TrueLayerToken      TrueLayerToken?
  StarlingToken       StarlingToken?
}

model Stock {
  id           Int           @id @default(autoincrement())
  name         String
  exchange     String
  ticker       String
  currencyCode String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  BankAccount  BankAccount[]
  StockQuote   StockQuote[]
}

model Category {
  id           Int    @id @default(autoincrement())
  name         String
  displayOrder Int    @default(0)

  // Categories can have children and a parent
  parentCategory   Category?  @relation("ParentCategory", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?
  children         Category[] @relation("ParentCategory")

  transactions Transaction[]

  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Trip {
  id          Int           @id @default(autoincrement())
  name        String
  country     String?
  city        String?
  destination String?
  start       DateTime?
  end         DateTime?
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]
}

model DisplaySettings {
  displayCurrencyCode       String
  excludeCategoryIdsInStats String
  user                      User     @relation(fields: [userId], references: [id])
  userId                    Int      @unique
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model User {
  id                     Int                      @id @default(autoincrement())
  login                  String
  password               String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  Bank                   Bank[]
  Trip                   Trip[]
  Tag                    Tag[]
  Category               Category[]
  Transaction            Transaction[]
  BankAccount            BankAccount[]
  DisplaySettings        DisplaySettings?
  TransactionPrototype   TransactionPrototype[]
  TrueLayerToken         TrueLayerToken[]
  NordigenToken          NordigenToken[]
  NordigenRequisition    NordigenRequisition[]
  ExternalAccountMapping ExternalAccountMapping[]
  StarlingToken          StarlingToken[]
}

model ExchangeRate {
  id               Int      @id @default(autoincrement())
  currencyCodeFrom String
  currencyCodeTo   String
  rateTimestamp    DateTime
  rateNanos        BigInt
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model StockQuote {
  id             Int      @id @default(autoincrement())
  stock          Stock    @relation(fields: [stockId], references: [id])
  stockId        Int
  quoteTimestamp DateTime
  value          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ExternalAccountMapping {
  internalAccountId Int         @unique
  externalAccountId String
  userId            Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  bankAccount       BankAccount @relation(fields: [internalAccountId], references: [id])
  user              User        @relation(fields: [userId], references: [id])
}

model TransactionPrototype {
  syntheticId           Int         @id @default(autoincrement())
  // not unique as multiple users can share the same bank and import the same transaction
  externalId            String
  externalDescription   String
  internalTransaction   Transaction @relation(fields: [internalTransactionId], references: [id])
  internalTransactionId Int
  user                  User        @relation(fields: [userId], references: [id])
  userId                Int
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model TrueLayerToken {
  id                String   @id @default(uuid())
  bank              Bank     @relation(fields: [bankId], references: [id])
  bankId            Int      @unique
  access            String   @db.VarChar(4096)
  accessValidUntil  DateTime
  refresh           String   @db.VarChar(4096)
  refreshValidUntil DateTime
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model NordigenToken {
  id                String   @id @default(uuid())
  bank              Bank     @relation(fields: [bankId], references: [id])
  bankId            Int      @unique
  access            String   @db.VarChar(4096)
  accessValidUntil  DateTime
  refresh           String   @db.VarChar(4096)
  refreshValidUntil DateTime
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model NordigenRequisition {
  id            String   @id
  requisitionId String   @unique
  institutionId String
  bank          Bank     @relation(fields: [bankId], references: [id])
  bankId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  completed     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model StarlingToken {
  id                String   @id @default(uuid())
  bank              Bank     @relation(fields: [bankId], references: [id])
  bankId            Int      @unique
  access            String   @db.VarChar(4096)
  accessValidUntil  DateTime
  refresh           String   @db.VarChar(4096)
  refreshValidUntil DateTime
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
