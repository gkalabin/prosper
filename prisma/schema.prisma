datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Transaction {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime
  description String
  amountCents Int

  // categorisation
  tags       Tag[]
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  // refunds and debt repayments
  transactionToBeRepayed   Transaction?  @relation("Repayments", fields: [transactionToBeRepayedId], references: [id])
  transactionToBeRepayedId Int?
  repayments               Transaction[] @relation("Repayments")

  // extensions
  personalExpense   PersonalExpense?
  thirdPartyExpense ThirdPartyExpense?
  income            Income?
  transfer          Transfer?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PersonalExpense {
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int         @unique

  // basic field extensions
  vendor              String
  ownShareAmountCents Int

  // trip expenses tracking
  trip   Trip? @relation(fields: [tripId], references: [id])
  tripId Int?

  // where the money were payed from
  account   BankAccount @relation(fields: [accountId], references: [id])
  accountId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ThirdPartyExpense {
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int         @unique

  // basic field extensions
  vendor              String
  ownShareAmountCents Int
  payer               String
  currency            Currency @relation(fields: [currencyId], references: [id])
  currencyId          Int

  // trip expenses tracking
  trip   Trip? @relation(fields: [tripId], references: [id])
  tripId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Income {
  transaction         Transaction @relation(fields: [transactionId], references: [id])
  transactionId       Int         @unique
  vendor              String
  ownShareAmountCents Int
  account             BankAccount @relation(fields: [accountId], references: [id])
  accountId           Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transfer {
  transaction         Transaction @relation(fields: [transactionId], references: [id])
  transactionId       Int         @unique
  receivedAmountCents Int
  accountFrom         BankAccount @relation("OutgoingTransfers", fields: [accountFromId], references: [id])
  accountFromId       Int
  accountTo           BankAccount @relation("IncomingTransfers", fields: [accountToId], references: [id])
  accountToId         Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankAccount {
  id         Int      @id @default(autoincrement())
  name       String
  bank       Bank     @relation(fields: [bankId], references: [id])
  bankId     Int
  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId Int

  // UI configuration
  displayOrder Int     @default(0)
  archived     Boolean @default(false)
  liquid       Boolean @default(true)

  // Joint accounts are owned by 2 people and personal value of such accounts is half of the balance.
  joint Boolean @default(false)

  // TODO: move to a separate table
  initialBalanceCents Int @default(0)

  PersonalExpense   PersonalExpense[]
  outgoingTransfers Transfer[]        @relation("OutgoingTransfers")
  incomingTransfers Transfer[]        @relation("IncomingTransfers")
  Income            Income[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bank {
  id           Int           @id @default(autoincrement())
  name         String
  displayOrder Int           @default(0)
  accounts     BankAccount[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // user   User @relation(fields: [userId], references: [id])
  // userId Int
}

model Currency {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ThirdPartyExpense ThirdPartyExpense[]
  BankAccount       BankAccount[]
}

model Category {
  id           Int    @id @default(autoincrement())
  name         String
  displayOrder Int    @default(0)

  // Categories can have children and a parent
  parentCategory   Category?  @relation("ParentCategory", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?
  children         Category[] @relation("ParentCategory")

  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Trip {
  id                Int                 @id @default(autoincrement())
  destination       String
  start             DateTime
  end               DateTime
  PersonalExpense   PersonalExpense[]
  ThirdPartyExpense ThirdPartyExpense[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  login     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Bank      Bank[]
}

model OpenBankingToken {
  id              String   @id @default(uuid())
  access_token    String   @db.VarChar(4096)
  expires_in      Int
  token_type      String
  refresh_token   String
  scope           String
  tokenCreatedAt  DateTime
  tokenValidUntil DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Bank      Bank[]
}
