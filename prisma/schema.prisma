datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Transaction {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime
  description String
  amountCents Int

  // categorisation
  tags       Tag[]
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  // refunds and debt repayments
  transactionToBeRepayed   Transaction?  @relation("Repayments", fields: [transactionToBeRepayedId], references: [id])
  transactionToBeRepayedId Int?
  repayments               Transaction[] @relation("Repayments")

  // extensions
  personalExpense   PersonalExpense?
  thirdPartyExpense ThirdPartyExpense?
  income            Income?
  transfer          Transfer?

  user                 User                   @relation(fields: [userId], references: [id])
  userId               Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  TransactionPrototype TransactionPrototype[]
}

model PersonalExpense {
  transaction         Transaction @relation(fields: [transactionId], references: [id])
  transactionId       Int         @unique
  // basic field extensions
  vendor              String
  otherPartyName      String
  ownShareAmountCents Int
  // trip expenses tracking
  trip                Trip?       @relation(fields: [tripId], references: [id])
  tripId              Int?
  // extension specific fields
  account             BankAccount @relation(fields: [accountId], references: [id])
  accountId           Int
  // system fields
  user                User        @relation(fields: [userId], references: [id])
  userId              Int
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model ThirdPartyExpense {
  transaction         Transaction @relation(fields: [transactionId], references: [id])
  transactionId       Int         @unique
  // basic field extensions
  vendor              String
  payer               String
  ownShareAmountCents Int
  // trip expenses tracking
  trip                Trip?       @relation(fields: [tripId], references: [id])
  tripId              Int?
  // extension specific fields
  currency            Currency    @relation(fields: [currencyId], references: [id])
  currencyId          Int
  // system fields
  user                User        @relation(fields: [userId], references: [id])
  userId              Int
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Income {
  transaction         Transaction @relation(fields: [transactionId], references: [id])
  transactionId       Int         @unique
  // basic field extensions
  payer               String
  otherPartyName      String
  ownShareAmountCents Int
  // extension specific fields
  account             BankAccount @relation(fields: [accountId], references: [id])
  accountId           Int
  // system fields
  user                User        @relation(fields: [userId], references: [id])
  userId              Int
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Transfer {
  transaction         Transaction @relation(fields: [transactionId], references: [id])
  transactionId       Int         @unique
  receivedAmountCents Int
  accountFrom         BankAccount @relation("OutgoingTransfers", fields: [accountFromId], references: [id])
  accountFromId       Int
  accountTo           BankAccount @relation("IncomingTransfers", fields: [accountToId], references: [id])
  accountToId         Int

  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankAccount {
  id         Int      @id @default(autoincrement())
  name       String
  bank       Bank     @relation(fields: [bankId], references: [id])
  bankId     Int
  currency   Currency @relation(fields: [currencyId], references: [id])
  currencyId Int

  // UI configuration
  displayOrder Int     @default(0)
  archived     Boolean @default(false)
  liquid       Boolean @default(true)

  // Joint accounts are owned by 2 people and personal value of such accounts is half of the balance.
  joint Boolean @default(false)

  // TODO: move to a separate table
  initialBalanceCents Int @default(0)

  PersonalExpense   PersonalExpense[]
  outgoingTransfers Transfer[]        @relation("OutgoingTransfers")
  incomingTransfers Transfer[]        @relation("IncomingTransfers")
  Income            Income[]

  user                   User                     @relation(fields: [userId], references: [id])
  userId                 Int
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  ExternalAccountMapping ExternalAccountMapping[]
}

model Bank {
  id           Int           @id @default(autoincrement())
  name         String
  displayOrder Int           @default(0)
  accounts     BankAccount[]

  user                User                 @relation(fields: [userId], references: [id])
  userId              Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  NordigenRequisition NordigenRequisition?
  NordigenToken       NordigenToken?
  TrueLayerToken      TrueLayerToken?
  StarlingToken       StarlingToken?
}

model Currency {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ThirdPartyExpense ThirdPartyExpense[]
  BankAccount       BankAccount[]
  ExchangeRatesFrom ExchangeRate[]      @relation("RatesFrom")
  ExchangeRatesTo   ExchangeRate[]      @relation("RatesTo")
  StockQuote        StockQuote[]
  DisplaySettings   DisplaySettings[]
}

model Category {
  id           Int    @id @default(autoincrement())
  name         String
  displayOrder Int    @default(0)

  // Categories can have children and a parent
  parentCategory   Category?  @relation("ParentCategory", fields: [parentCategoryId], references: [id])
  parentCategoryId Int?
  children         Category[] @relation("ParentCategory")

  transactions Transaction[]

  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id])
  userId       Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Trip {
  id                Int                 @id @default(autoincrement())
  name              String
  destination       String?
  start             DateTime?
  end               DateTime?
  PersonalExpense   PersonalExpense[]
  ThirdPartyExpense ThirdPartyExpense[]
  user              User                @relation(fields: [userId], references: [id])
  userId            Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model DisplaySettings {
  currency                  Currency @relation(fields: [displayCurrencyId], references: [id])
  displayCurrencyId         Int
  excludeCategoryIdsInStats String
  user                      User     @relation(fields: [userId], references: [id])
  userId                    Int      @unique
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model User {
  id                     Int                      @id @default(autoincrement())
  login                  String
  password               String
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  Bank                   Bank[]
  Trip                   Trip[]
  Tag                    Tag[]
  Category               Category[]
  Transaction            Transaction[]
  PersonalExpense        PersonalExpense[]
  ThirdPartyExpense      ThirdPartyExpense[]
  Income                 Income[]
  Transfer               Transfer[]
  BankAccount            BankAccount[]
  DisplaySettings        DisplaySettings?
  TransactionPrototype   TransactionPrototype[]
  TrueLayerToken         TrueLayerToken[]
  NordigenToken          NordigenToken[]
  NordigenRequisition    NordigenRequisition[]
  ExternalAccountMapping ExternalAccountMapping[]
  StarlingToken          StarlingToken[]
}

model ExchangeRate {
  id             Int      @id @default(autoincrement())
  currencyFrom   Currency @relation("RatesFrom", fields: [currencyFromId], references: [id])
  currencyFromId Int
  currencyTo     Currency @relation("RatesTo", fields: [currencyToId], references: [id])
  currencyToId   Int
  rateTimestamp  DateTime
  rateNanos      BigInt
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StockQuote {
  id             Int      @id @default(autoincrement())
  currency       Currency @relation(fields: [currencyId], references: [id])
  currencyId     Int
  exchange       String
  ticker         String
  quoteTimestamp DateTime
  value          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model TrueLayerToken {
  id                   String   @id @default(uuid())
  bank                 Bank     @relation(fields: [bankId], references: [id])
  bankId               Int      @unique
  accessToken          String   @db.VarChar(4096)
  access               String   @default("") @db.VarChar(4096)
  accessValidUntil     DateTime @default(now())
  refreshToken         String
  refresh              String   @default("") @db.VarChar(4096)
  refreshValidUntil    DateTime @default(now())
  // TODO: remove
  tokenCreatedAt       DateTime
  tokenValidUntil      DateTime
  connectionCreatedAt  DateTime
  connectionValidUntil DateTime
  //
  user                 User     @relation(fields: [userId], references: [id])
  userId               Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model ExternalAccountMapping {
  internalAccountId Int         @unique
  externalAccountId String
  userId            Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  bankAccount       BankAccount @relation(fields: [internalAccountId], references: [id])
  user              User        @relation(fields: [userId], references: [id])
}

model TransactionPrototype {
  synteticId            Int         @id @default(autoincrement())
  // not unique as multiple users can share the same bank and import the same transaction
  externalId            String
  externalDescription   String
  internalTransaction   Transaction @relation(fields: [internalTransactionId], references: [id])
  internalTransactionId Int
  user                  User        @relation(fields: [userId], references: [id])
  userId                Int
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model NordigenToken {
  id                String   @id @default(uuid())
  bank              Bank     @relation(fields: [bankId], references: [id])
  bankId            Int      @unique
  access            String   @db.VarChar(4096)
  accessValidUntil  DateTime
  refresh           String   @db.VarChar(4096)
  refreshValidUntil DateTime
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model NordigenRequisition {
  id            String   @id
  requisitionId String   @unique
  institutionId String   @default("")
  bank          Bank     @relation(fields: [bankId], references: [id])
  bankId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  completed     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model StarlingToken {
  id                String   @id @default(uuid())
  bank              Bank     @relation(fields: [bankId], references: [id])
  bankId            Int      @unique
  accessToken       String   @db.VarChar(4096)
  access            String   @default("") @db.VarChar(4096)
  accessValidUntil  DateTime @default(now())
  refresh           String   @default("") @db.VarChar(4096)
  refreshValidUntil DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id])
  userId            Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
